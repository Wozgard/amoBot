import TelegramBot from "node-telegram-bot-api";
import { Client } from "amocrm-js";
import dotenv from "dotenv";
import { getContantFields } from "./contact_castom_feilds.js";

dotenv.config();

const telegramToken = process.env.TELEGRAM_TOKEN;

const amoCRMClient = new Client({
  domain: process.env.AMO_DOMAIN, // –î–æ–º–µ–Ω –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ amoCRM
  auth: {
    client_id: process.env.AMO_CLIENT_ID, // ID –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    client_secret: process.env.AMO_CLIENT_SECRET, // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    redirect_uri: process.env.AMO_REDIRECT_URI, // –ê–¥—Ä–µ—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    code: process.env.AMO_CODE, // –ö–æ–¥ –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –≤–∞—à–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  },
});
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç
const bot = new TelegramBot(telegramToken, { polling: true });

bot.on("polling_error", console.log);

const messageTemplate =
"*founder name:* \n*about founder:* \n*company name:* \n*about company:* \n*web:* \n*TG:* \n*link LD:* \n*founder position:* \n*CB:* \n*stage:* \n*amount:* \n*date funding:* \n*problem:* \n*email:* \n*where founder's money comes from:* \n*where company's money comes from:* \n*where info about problem comes from:* \n*inst:* \nüìç ";

// –°–ª—É—à–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on("message", (msg) => {
  const messageText = msg.text;
  const chatId = msg.chat.id;

  if (messageText !== "/start") {
    // –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞)
    const parsedInfo = parseMessage(messageText);

    if (parsedInfo.isSuccess) {
      // –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É –≤ amoCRM
      createDealContactCompanyInAmoCRM(parsedInfo)
        .then(() => {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏
          bot.sendMessage(chatId, "–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ amoCRM");
        })
        .catch((error) => {
          console.error(error);
          bot.sendMessage(
            chatId,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ –≤ amoCRM"
          );
        });
    }
    else {
      bot.sendMessage(
        chatId,
        `–¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä—å –µ—â–µ —Ä–∞–∑. –û–Ω –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è –≤—Å–µ —Å—Ç—Ä–æ—á–∫–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞, –ø—É–Ω–∫—Ç—ã –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏`
      );

      bot.sendMessage(chatId, `${messageTemplate}`, { parse_mode: "Markdown" });
    }
  } else {
    bot.sendMessage(
      chatId,
      `–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–º–æ–ë–æ—Ç. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω—å–∫—É, –ø—Ä–∏–º–µ—Ä –∫–æ—Ç–æ—Ä–æ–π –Ω–∏–∂–µ –∏ —è —Å–æ–∑–¥–∞–º –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É –≤ amoCRM`
    );
    bot.sendMessage(chatId, `${messageTemplate}`, { parse_mode: "Markdown" });
  }
});

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
 * @param message - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–≥
 */
function parseMessage(message) {
  const lines = message.split("\n");
  if (lines.length > 1) {
    try {
      const founder = lines[0].replace("founder name: ", "");
      const aboutFounder = lines[1].replace("about founder: ", "");
      const companyName = lines[2].replace("company name: ", "");
      const aboutCompany = lines[3].replace("about company: ", "");
      const web = lines[4].replace("web: ", "");
      const tg = lines[5].replace("TG: ", "");
      const ld = lines[6].replace("link LD: ", "");
      const position = lines[7].replace("founder position: ", "");
      const cb = lines[8].replace("CB: ", "");
      const stage = lines[9].replace("stage: ", "");
      const amount = lines[10].replace("amount: ", "");
      const dateFunding = lines[11].replace("date funding: ", "");
      const problem = lines[12].replace("problem: ", "");
      const email = lines[13].replace("email: ", "");
      const whereMoneyFounder = lines[14].replace(
        "where founder's money comes from: ",
        ""
      );
      const whereMoneyCompany = lines[15].replace(
        "where company's money comes from: ",
        ""
      );
      const whereInfo = lines[16].replace(
        "where info about problem comes from: ",
        ""
      );
      const inst = lines[17].replace("inst: ", "");
      const whereFrom = lines[18].replace("üìç ", "");

      const companyData = {
        name: companyName,
        custom_fields_values: [
          {
            field_id: 697953,
            field_name: "Web",
            field_code: "WEB",
            field_type: "url",
            values: [{ value: web }],
          },
          {
            field_id: 983307,
            field_name: "About company",
            field_code: null,
            field_type: "text",
            values: [{ value: aboutCompany }],
          },
        ],
      };

      const contactData = {
        name: founder,
        custom_fields_values: getContantFields(
          tg,
          position,
          stage,
          amount,
          dateFunding,
          aboutFounder,
          whereFrom,
          ld,
          cb,
          problem,
          email,
          whereMoneyFounder,
          whereMoneyCompany,
          inst,
          whereInfo
        ),
      };

      const leadData = {
        name: companyName,
      };

      return { isSuccess: true, companyData, contactData, leadData };
    } catch {
      return {
        isSuccess: false,
        companyData: {},
        contactData: {},
        leadData: {},
      };
    }
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏, –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ amoCRM
 * @param data - –æ–±—ä–µ–∫—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–π –∏–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–≥, –≤–∫–ª—é—á–∞—é—â–∏–π –≤ —Å–µ–±—è 3 –æ–±—ä–µ–∫—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: companyData, contactData, leadData
 */
async function createDealContactCompanyInAmoCRM(data) {
  /**
   * –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –≤ amoCRM
   */
  const company = new amoCRMClient.Company(data.companyData);
  await company.save();

  /**
   * –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ amoCRM –∏ —Å–≤—è–∑—ã–≤–∞–µ–º —Å –∫–æ–º–ø–∞–Ω–∏–µ–π
   */
  const contact = new amoCRMClient.Contact(data.contactData);
  contact.embeddedCompanies.add([company]);
  await contact.save();

  /**
   * –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –∫–æ–º–ø–∞–Ω–∏–∏
   * —Å–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É –≤ amoCRM –∏ —Å–≤—è–∑—ã–≤–∞–µ–º —Å –∫–æ–º–ø–∞–Ω–∏–µ–π –∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
   */
  if (contact.id && company.id) {
    const lead = new amoCRMClient.Lead({
      name: data.leadData.name,
    });

    lead.embeddedContacts.add([contact]);
    lead.embeddedCompanies.add([company]);
    await lead.save();
    console.log(lead);
  }
}
